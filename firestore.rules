/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and documents.
 * Users can only read and write their own profile data. Documents are stored
 * in a top-level collection but access is controlled via the `userId` field
 * within each document.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /documents/{docId}: Stores documents, each containing a `userId` field
 *   to indicate ownership.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Documents are stored in a top-level collection instead of a user subcollection
 *   to allow for easier querying across all documents, but writes are restricted
 *   to the owner via the `userId` field.
 *
 * Denormalization for Authorization:
 * The `documents` collection relies on the `userId` field within each document to
 * enforce ownership. This avoids the need for complex queries or additional
 * data lookups to determine access rights.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get, update, delete) - User with UID 'user_abc' can read/update/delete their profile at /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot read/update/delete the profile at /users/user_abc.
     * @principle Enforces document ownership for writes.  Allows owner-only access to profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to documents.
     * @path /documents/{docId}
     * @allow (create) - User with UID 'user_abc' can create a document at /documents/doc123 with userId: 'user_abc'.
     * @allow (get, list) - Any signed-in user can read any document.
     * @allow (update, delete) - User with UID 'user_abc' can update/delete a document at /documents/doc123 if they are the owner (userId: 'user_abc').
     * @deny (create) - User with UID 'user_xyz' cannot create a document at /documents/doc123 with userId: 'user_abc'.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update/delete a document at /documents/doc123 owned by user_abc.
     * @principle Enforces document ownership for writes. Allows public read access to documents.
     */
    match /documents/{docId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Controls access to document chunks for large files.
     * @path /documentChunks/{chunkId}
     * @allow (create) - User can create chunks for their documents.
     * @allow (get, list) - User can read chunks for their documents.
     * @allow (update, delete) - User can modify/delete chunks for their documents.
     * @principle Chunks are tied to documents and follow the same ownership rules.
     */
    match /documentChunks/{chunkId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
    }
  }
}