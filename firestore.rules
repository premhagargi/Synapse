/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for data access. Each user can only access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /users/{userId}/documents/{docId}: Stores individual documents uploaded by each user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document.
 * - Users can only list and manage documents within their own /users/{userId}/documents collection.
 * - Listing all users is disallowed.
 * - Data validation is minimal for prototyping but should be expanded in production. Only critical relational fields are validated.
 *
 * Denormalization for Authorization:
 * - Each document in `/users/{userId}/documents/{docId}` contains a `userId` field, enabling rules to quickly verify ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner of the profile.
     * @deny (get, create, update, delete) if the user is not the owner of the profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Prevent listing all users.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}/documents/{docId}
     * @allow (create, get, list, update, delete) if the user is the owner of the document.
     * @deny (create, get, list, update, delete) if the user is not the owner of the document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/documents/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}