/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Users can only
 * read and write data that belongs to them, as defined by their unique
 * user ID (UID).  User documents are readable only by the user themselves
 * and are not writable directly by clients (writes are managed by backend
 * authentication triggers). Documents nested under `/users/{userId}` are
 * fully owned by the corresponding user.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores public user profile information.
 * - `/users/{userId}/documents/{docId}`: Stores user-uploaded documents.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Users can only create, read, update, and delete documents under their own user ID.
 *
 * Denormalization for Authorization:
 * - The `Document` entity requires `userId` to match the path `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.  Users can read their own profile, but not write (profile updates are handled via auth triggers).
     * @path /users/{userId}
     * @allow (read) User 'user_abc' can read their own profile: `request.auth.uid == 'user_abc'`
     * @deny (read) User 'user_abc' cannot read another user's profile: `request.auth.uid == 'user_xyz'`
     * @deny (write) No client-side writes are allowed to user profiles.
     * @principle Enforces user-only read access to profile information and prevents client-side modification.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages user-uploaded documents. Users can create, read, update, and delete documents they own.
     * @path /users/{userId}/documents/{docId}
     * @allow (create) User 'user_abc' can create a document under their ID: `request.auth.uid == 'user_abc'` and `request.resource.data.userId == 'user_abc'`
     * @allow (read) User 'user_abc' can read a document under their ID: `request.auth.uid == 'user_abc'`
     * @allow (update) User 'user_abc' can update a document under their ID: `request.auth.uid == 'user_abc'`
     * @allow (delete) User 'user_abc' can delete a document under their ID: `request.auth.uid == 'user_abc'`
     * @deny (create) User 'user_abc' cannot create a document under another user's ID: `request.auth.uid == 'user_xyz'`
     * @deny (read) User 'user_abc' cannot read a document under another user's ID: `request.auth.uid == 'user_xyz'`
     * @deny (update) User 'user_abc' cannot update a document under another user's ID: `request.auth.uid == 'user_xyz'`
     * @deny (delete) User 'user_abc' cannot delete a document under another user's ID: `request.auth.uid == 'user_xyz'`
     * @principle Enforces strict user ownership for documents.
     */
    match /users/{userId}/documents/{docId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.get("userId") == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}

/**
 * @description Checks if the user is signed in.
 * @return {bool} True if the user is signed in, false otherwise.
 */
function isSignedIn() {
  return request.auth != null;
}

/**
 * @description Checks if the user is the owner of the resource based on the userId.
 * @param {string} userId The user ID to compare against the request's authentication UID.
 * @return {bool} True if the user is the owner, false otherwise.
 */
function isOwner(userId) {
  return request.auth.uid == userId;
}

/**
 * @description Checks if the user is the owner of the existing resource.
 * @param {string} userId The user ID to compare against the request's authentication UID.
 * @return {bool} True if the user is the owner and the resource exists, false otherwise.
 */
function isExistingOwner(userId) {
    return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/documents/$(docId));
}

/**
 * @description Validates a new document on create.
 * @param {string} userId The user ID from the path.
 * @param {string} docId The document ID from the path.
 * @return {bool} True if the document is valid, false otherwise.
 */
function isValidNewDocument(userId, docId) {
  return request.resource.data.userId == userId && request.resource.data.id == docId;
}

/**
 * @description Checks if the userId is immutable during an update.
 * @param {string} userId The user ID from the path.
 * @return {bool} True if the userId is immutable, false otherwise.
 */
function isDocumentUserIdImmutable(userId) {
    return request.resource.data.userId == resource.data.userId;
}