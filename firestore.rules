/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @Core Philosophy
 * This ruleset enforces a user-centric security model where users have full control over their own data and limited access to other users' data.
 *
 * @Data Structure
 * - `/users/{userId}`: Stores public user profiles.  Users can only read their own profile.
 * - `/documents/{docId}`: Stores documents uploaded by users. Access is restricted based on the `userId` field within each document.
 *
 * @Key Security Decisions
 * - Users can only read their profile data, but cannot list all users.
 * - Documents are secured by owner-only access, preventing unauthorized modifications or deletions.
 *
 * @Denormalization for Authorization
 * - Documents are secured using the `userId` field inside the document, which must match the authenticated user's `uid` for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (update) Authenticated user can update their own profile if the userId matches their auth UID.
     * @allow (delete) Authenticated user can delete their own profile if the userId matches their auth UID.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (create) Unauthenticated user cannot create a profile.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // isOwner checks that the requested userId matches the authenticated user's ID.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // isExistingOwner also confirms that the document exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      // isSignedIn verifies that the user is authenticated.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-uploaded documents.
     * @path /documents/{docId}
     * @allow (get) Authenticated user can read a document if they are the owner.
     * @allow (create) Authenticated user can create a document if they are the owner.
     * @allow (update) Authenticated user can update a document if they are the owner.
     * @allow (delete) Authenticated user can delete a document if they are the owner.
     * @deny (get) Authenticated user cannot read another user's document.
     * @deny (create) Authenticated user cannot create a document for another user.
     * @deny (update) Authenticated user cannot update another user's document.
     * @deny (delete) Authenticated user cannot delete another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /documents/{docId} {
      // isDocumentOwner checks that the authenticated user's ID matches the document's userId.
      function isDocumentOwner(docUserId) {
        return request.auth.uid == docUserId;
      }

      // isExistingDocumentOwner also confirms that the document exists.
      function isExistingDocumentOwner(docUserId) {
        return isDocumentOwner(docUserId) && exists(resource);
      }

      // isSignedIn verifies that the user is authenticated.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isDocumentOwner(resource.data.userId);
      allow list: if isSignedIn();

      allow create: if isSignedIn() && isDocumentOwner(request.resource.data.userId);
      allow update: if isExistingDocumentOwner(resource.data.userId);
      allow delete: if isExistingDocumentOwner(resource.data.userId);
    }
  }
}