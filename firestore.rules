/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for documents and user data.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles.  A user can only read/write their own profile.
 * - /users/{userId}/documents/{docId}: Stores documents uploaded by a specific user. Only the owner can read/write these documents.
 *
 * Key Security Decisions:
 * - Users can only access their own data. Listing all users is disallowed.
 * - The rules do not validate the specific data types or required fields within the documents,
 *   allowing for flexible data shapes during prototyping. However, key fields like userId are validated for ownership.
 * - To simplify authorization, the 'userId' is duplicated both in the document path
 *   (/users/{userId}/documents/{docId}) and within the document's data itself (document.userId).
 *   This denormalization avoids the need for complex 'get()' operations in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, create, update, delete): If the user is signed in and the userId matches the authenticated user's ID.
     * @deny (get, create, update, delete): If the user is not signed in or the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      //Function to check if user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      //Function to check if user is the owner of the account being accessed
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to documents uploaded by a user.
     * @path /users/{userId}/documents/{docId}
     * @allow (get, list): If the user is signed in and is the owner of the document.
     * @allow (create): If the user is signed in, is the owner, and the document's userId matches the authenticated user's ID.
     * @allow (update, delete): If the user is signed in, is the owner, and the document exists.
     * @deny (get, list, create, update, delete): If the user is not signed in or is not the owner of the document.
     * @principle Enforces document ownership and validates relational integrity between the document and its parent user.
     */
    match /users/{userId}/documents/{docId} {
        //Check if the user has the same id as the user id in the url
        function isOwner(userId) {
            return request.auth.uid == userId;
        }
        
        //Helper function to check if the user owns the document and that the document exists
        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
    }
  }
}